worker_processes  2;
error_log /dev/stderr warn;

events {
  worker_connections 1024;
}

# make sure to set plaintext JWT_SECRET environment variable
env JWT_SECRET;

http {
  log_format main '[$time_local] $remote_addr - $remote_user - $server_name  to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';

  include /usr/local/openresty/nginx/conf/mime.types;
  sendfile on;

  access_log /dev/stdout main;
  lua_package_path "/usr/local/openresty/lualib/?.lua;;";

  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache:32m max_size=1g;


  upstream app2 {
    server host.docker.internal:8092;
  }

  upstream authapp {
    server host.docker.internal:8090;
  }

  upstream app1 {
    server host.docker.internal:8091;
  }



  server {
    listen 8080;
    server_name app2.local.com;

    # static locations

    location / {
      root /static/app2;
      try_files $uri$args $uri$args/ /index.html;
      autoindex off;
      access_log off;
      expires max;
    }

    # api locations

    location ~ ^/api(/test1/\w+(?:\?.*)?)$ {

      access_by_lua '
      local jwt = require("security-jwt")

      jwt.check({ "TEST_ROLE" })

      ';


      proxy_pass http://app2$1$is_args$args;
    }

    location ~ ^/api/auth(/oauth/token(?:\?.*)?)$ {


      proxy_pass http://authapp$1$is_args$args;
    }

    location ~ ^/api/auth(/actuator(?:\?.*)?)$ {


      proxy_pass http://authapp$1$is_args$args;
    }

    location ~* ^/api {
      return 404;
    }

  }

  server {
    listen 8080;
    server_name app1.local.com;

    # static locations

    location / {
      root /static/app1;
      try_files $uri$args $uri$args/ /index.html;
      autoindex off;
      access_log off;
      expires max;
    }

    # api locations

    location ~ ^/api(/test1/\w+(?:\?.*)?)$ {

      access_by_lua '
      local jwt = require("security-jwt")

      jwt.check({ "TEST_ROLE" })

      ';


      proxy_cache cache;
      proxy_cache_valid 10s;

      proxy_pass http://app1$1$is_args$args;
    }

    location ~ ^/api/auth(/oauth/token(?:\?.*)?)$ {


      proxy_pass http://authapp$1$is_args$args;
    }

    location ~ ^/api/auth(/actuator(?:\?.*)?)$ {


      proxy_pass http://authapp$1$is_args$args;
    }

    location ~* ^/api {
      return 404;
    }

  }

}
